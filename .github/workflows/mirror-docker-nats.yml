name: Mirror Nats Images to ECR

on:
  workflow_dispatch:

jobs:
  mirror:
    name: Mirror Nats Images to ECR
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT: ${{ secrets.ACCOUNT }}

      IMAGE_GROUPS: "NATS NATSIO_NATS_PROMETHEUS NATSIO_NATS_BOX NATSIO_NATS_SERVER"

      NATS: "2.11.6-alpine"
      NATS_ECR_MAP: |
        {
          "nats": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/nats"
        }

      NATSIO_NATS_PROMETHEUS: "0.17.3"
      NATSIO_NATS_PROMETHEUS_ECR_MAP: |
        {
          "natsio/prometheus-nats-exporter": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/natsio/prometheus-nats-exporter"
        }

      NATSIO_NATS_BOX: "0.18.0"
      NATSIO_NATS_BOX_ECR_MAP: |
        {
          "natsio/nats-box": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/natsio/nats-box"
        }

      NATSIO_NATS_SERVER: "0.18.2"
      NATSIO_NATS_SERVER_ECR_MAP: |
        {
          "natsio/nats-server-config-reloader": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/natsio/nats-server-config-reloader"
        }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Mirror Images from DockerHub to ECR
        run: |
          set -euo pipefail

          for GROUP in $IMAGE_GROUPS; do
            TAG_VAR="${GROUP}"
            MAP_VAR="${GROUP}_ECR_MAP"

            TAG="${!TAG_VAR}"
            RAW_MAP="${!MAP_VAR}"

            MAP=$(echo "$RAW_MAP" | envsubst)

            echo "Processing group: $GROUP"
            echo "Using tag: $TAG"

            if ! echo "$MAP" | jq empty; then
              echo "Invalid JSON in map for $GROUP"
              continue
            fi

            unset IMAGES || true
            declare -A IMAGES

            while IFS="=" read -r src dst; do
              src_clean="$(echo "$src" | xargs)"
              dst_clean="$(echo "$dst" | xargs)"
              IMAGES["$src_clean"]="$dst_clean"
            done < <(echo "$MAP" | jq -r 'to_entries[] | "\(.key)=\(.value)"')

            for SRC_IMAGE in "${!IMAGES[@]}"; do
              DST_IMAGE="${IMAGES[$SRC_IMAGE]}"
              
              echo "Checking availability of $SRC_IMAGE:$TAG"
              if ! docker manifest inspect "$SRC_IMAGE:$TAG" > /dev/null 2>&1; then
                echo "Image not found: $SRC_IMAGE:$TAG â€” skipping"
                continue
              fi

              echo "Pulling $SRC_IMAGE:$TAG"
              docker pull "$SRC_IMAGE:$TAG"

              echo "Tagging $DST_IMAGE:$TAG"
              docker tag "$SRC_IMAGE:$TAG" "$DST_IMAGE:$TAG"

              echo "Pushing $DST_IMAGE:$TAG"
              docker push "$DST_IMAGE:$TAG"
            done

            echo "Finished group: $GROUP"
            echo ""
          done
