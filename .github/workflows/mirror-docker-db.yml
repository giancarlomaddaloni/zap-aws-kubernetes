name: Mirror DB's Images to ECR

on:
  workflow_dispatch:

jobs:
  mirror:
    name: Mirror DB's Images to ECR
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ACCOUNT: ${{ secrets.ACCOUNT }}

      IMAGE_GROUPS: "BITNAMI_KUBECTL BITNAMI_MONGODB BITNAMI_MONGODB_EXPORTER BITNAMI_NGINX BITNAMI_OS_SHELL BITNAMI_REDIS_EXPORTER BITNAMI_REDIS_SENTINEL BITNAMI_REDIS"

      BITNAMI_KUBECTL: "1.33.2-debian-12-r3"
      BITNAMI_KUBECTL_ECR_MAP: |
        {
          "docker.io/bitnami/kubectl": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/bitnami/kubectl"
        }

      BITNAMI_MONGODB: "8.0.11-debian-12-r0"
      BITNAMI_MONGODB_ECR_MAP: |
        {
          "docker.io/bitnami/mongodb": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/bitnami/mongodb"
        }

      BITNAMI_MONGODB_EXPORTER: "0.45.0-debian-12-r4"
      BITNAMI_MONGODB_EXPORTER_ECR_MAP: |
        {
          "docker.io/bitnami/mongodb-exporter": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/bitnami/mongodb-exporter"
        }

      BITNAMI_NGINX: "1.29.0-debian-12-r2"
      BITNAMI_NGINX_ECR_MAP: |
        {
          "docker.io/bitnami/nginx": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/bitnami/nginx"
        }

      BITNAMI_OS_SHELL: "12-debian-12-r47"
      BITNAMI_OS_SHELL_ECR_MAP: |
        {
          "docker.io/bitnami/os-shell": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/bitnami/os-shell"
        }


      BITNAMI_REDIS_EXPORTER: "1.74.0-debian-12-r2"
      BITNAMI_REDIS_EXPORTER_ECR_MAP: |
        {
          "docker.io/bitnami/redis-exporter": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/bitnami/redis-exporter"
        }

      BITNAMI_REDIS_SENTINEL: "8.0.3-debian-12-r1"
      BITNAMI_REDIS_SENTINEL_ECR_MAP: |
        {
          "docker.io/bitnami/redis-sentinel": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/bitnami/redis-sentinel"
        }

      BITNAMI_REDIS: "8.0.3-debian-12-r1"
      BITNAMI_REDIS_ECR_MAP: |
        {
          "docker.io/bitnami/redis": "${ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/bitnami/redis"
        }


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Mirror Images from DockerHub to ECR
        run: |
          set -euo pipefail

          for GROUP in $IMAGE_GROUPS; do
            TAG_VAR="${GROUP}"
            MAP_VAR="${GROUP}_ECR_MAP"

            TAG="${!TAG_VAR}"
            RAW_MAP="${!MAP_VAR}"

            MAP=$(echo "$RAW_MAP" | envsubst)

            echo "Processing group: $GROUP"
            echo "Using tag: $TAG"

            if ! echo "$MAP" | jq empty; then
              echo "Invalid JSON in map for $GROUP"
              continue
            fi

            unset IMAGES || true
            declare -A IMAGES

            while IFS="=" read -r src dst; do
              src_clean="$(echo "$src" | xargs)"
              dst_clean="$(echo "$dst" | xargs)"
              IMAGES["$src_clean"]="$dst_clean"
            done < <(echo "$MAP" | jq -r 'to_entries[] | "\(.key)=\(.value)"')

            for SRC_IMAGE in "${!IMAGES[@]}"; do
              DST_IMAGE="${IMAGES[$SRC_IMAGE]}"
              
              echo "Checking availability of $SRC_IMAGE:$TAG"
              if ! docker manifest inspect "$SRC_IMAGE:$TAG" > /dev/null 2>&1; then
                echo "Image not found: $SRC_IMAGE:$TAG â€” skipping"
                continue
              fi

              echo "Pulling $SRC_IMAGE:$TAG"
              docker pull "$SRC_IMAGE:$TAG"

              echo "Tagging $DST_IMAGE:$TAG"
              docker tag "$SRC_IMAGE:$TAG" "$DST_IMAGE:$TAG"

              echo "Pushing $DST_IMAGE:$TAG"
              docker push "$DST_IMAGE:$TAG"
            done

            echo "Finished group: $GROUP"
            echo ""
          done
